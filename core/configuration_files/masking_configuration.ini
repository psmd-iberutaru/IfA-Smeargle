# The data directory that is to be used or worked from for 
# reformatting.
data_directory = ''

# Should the masks be put into a sub-folder?
subfolder = True

# The name of the mask fits file. (Do not include the directory or 
# extension.)
mask_file_name = ''

# The tag of the filter files. This string identifies a particular
# filter.
filter_tag_name = ''

# Working parameters for geometric based masks.
[geometric]
    # The column and row indexes are 0-indexed pixel coordinates. 
    # Those specified are masked if this mask is run.
    run_mask_single_pixels = False
    pixel_column_indexes = ,
    pixel_row_indexes = ,

    # This is the column and row boundaries (0-indexed) that determine
    # the shape of a rectangle to be masked if this mask is run.
    run_mask_rectangle = False
    rectangle_column_range = ,
    rectangle_row_range = ,

    # This is the column and row boundaries (0-indexed) that determine
    # the shape of a sub-array from the data array. All pixels outside
    # of the sub-array is masked if this mask is run.
    run_mask_subarray = False
    subarray_column_range = ,
    subarray_row_range = ,

    # This is the 0-indexed columns that, if this mask runs, will
    # be masked. Supply the input as a list.
    run_mask_columns = False
    column_list = ,

    # This is the 0-indexed columns that, if this mask runs, will
    # be masked. Supply the input as a list.
    run_mask_rows = False
    row_list = ,

    # This mask, if run, will provide a mask where no pixels are 
    # masked.
    run_mask_nothing = False

    # This mask, if run, will provide a mask where all pixels are 
    # masked.
    run_mask_everything = False


# Working parameters for value based filters.
[filter]
    # This filter calculates the mean and standard deviation of the 
    # data. If run, it will filter out all values `sigma_multiple` 
    # times outside the standard deviation of the mean.
    run_filter_sigma_value = False
    sigma_multiple = 0

    # This filter filters out the highest `top_percent` percent and 
    # lowest `bottom_percent` percent of all values based on their 
    # sorted order, if ran that is.
    run_filter_percent_truncation = False
    top_percent = 0
    bottom_percent = 0

    # This filter filters out the highest `top_count` number of 
    # pixels and the lowest `bottom_count` number of pixels based
    # on their sorted order, if ran that is. 
    run_filter_pixel_truncation = False
    top_count = 0
    bottom_count = 0

    # If this filter is ran, all pixels strictly more than the 
    # `maximum_value` are filtered.
    run_filter_maximum_value = False
    maximum_value = 0

    # If this filter is ran, all pixels strictly less than the 
    # `minimum_value` are filtered.
    run_filter_minimum_value = False
    minimum_value = 0

    # If this filter is ran, all pixel values equal to the 
    # `exact_value` are filtered. (See the mask's documentation 
    # for more information.)
    run_filter_exact_value = False
    exact_value = 0
    
    # If this filter is ran, all pixels that are invalid for 
    # processing, such as infinities and NaNs, are filtered.
    run_filter_invalid_value = False

# Please do not change this.
[meta]
    config_spec = 'masking_specification'